// This file is automatically generated.
package data

import (
	"strings"

	"github.com/jackc/pgx"
)

type Session struct {
	ID        Bytes
	UserID    Int32
	StartTime Time
}

func CountSession(db Queryer) (int64, error) {
	var n int64
	sql := `select count(*) from "sessions"`
	err := db.QueryRow(sql).Scan(&n)
	return n, err
}

func SelectAllSession(db Queryer) ([]Session, error) {
	sql := `select
  "id",
  "user_id",
  "start_time"
from "sessions"`

	var rows []Session

	dbRows, err := db.Query(sql)
	if err != nil {
		return nil, err
	}

	for dbRows.Next() {
		var row Session
		dbRows.Scan(
			&row.ID,
			&row.UserID,
			&row.StartTime,
		)
		rows = append(rows, row)
	}

	if dbRows.Err() != nil {
		return nil, dbRows.Err()
	}

	return rows, nil
}

func SelectSessionByPK(
	db Queryer,
	id []byte,
) (*Session, error) {
	sql := `select
  "id",
  "user_id",
  "start_time"
from "sessions"
where "id"=$1`

	var row Session
	err := db.QueryRow(sql, id).Scan(
		&row.ID,
		&row.UserID,
		&row.StartTime,
	)
	if err == pgx.ErrNoRows {
		return nil, ErrNotFound
	} else if err != nil {
		return nil, err
	}

	return &row, nil
}

func InsertSession(db Queryer, row *Session) error {
	args := pgx.QueryArgs(make([]interface{}, 0, 3))

	var columns, values []string

	row.ID.addInsert(`id`, &columns, &values, &args)
	row.UserID.addInsert(`user_id`, &columns, &values, &args)
	row.StartTime.addInsert(`start_time`, &columns, &values, &args)

	sql := `insert into "sessions"(` + strings.Join(columns, ", ") + `)
values(` + strings.Join(values, ",") + `)
returning "id"
  `

	return db.QueryRow(sql, args...).Scan(&row.ID)
}

func UpdateSession(db Queryer,
	id []byte,
	row *Session,
) error {
	sets := make([]string, 0, 3)
	args := pgx.QueryArgs(make([]interface{}, 0, 3))

	row.ID.addUpdate(`id`, &sets, &args)
	row.UserID.addUpdate(`user_id`, &sets, &args)
	row.StartTime.addUpdate(`start_time`, &sets, &args)

	if len(sets) == 0 {
		return nil
	}

	sql := `update "sessions" set ` + strings.Join(sets, ", ") + ` where ` + `"id"=` + args.Append(id)

	commandTag, err := db.Exec(sql, args...)
	if err != nil {
		return err
	}
	if commandTag.RowsAffected() != 1 {
		return ErrNotFound
	}
	return nil
}

func DeleteSession(db Queryer,
	id []byte,
) error {
	args := pgx.QueryArgs(make([]interface{}, 0, 1))

	sql := `delete from "sessions" where ` + `"id"=` + args.Append(id)

	commandTag, err := db.Exec(sql, args...)
	if err != nil {
		return err
	}
	if commandTag.RowsAffected() != 1 {
		return ErrNotFound
	}
	return nil
}
