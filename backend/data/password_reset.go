// This file is automatically generated.
package data

import (
	"strings"

	"github.com/jackc/pgx"
)

type PasswordReset struct {
	Token          String
	Email          String
	RequestIP      IPNet
	RequestTime    Time
	UserID         Int32
	CompletionIP   IPNet
	CompletionTime Time
}

func CountPasswordReset(db Queryer) (int64, error) {
	var n int64
	sql := `select count(*) from "password_resets"`
	err := db.QueryRow(sql).Scan(&n)
	return n, err
}

func SelectAllPasswordReset(db Queryer) ([]PasswordReset, error) {
	sql := `select
  "token",
  "email",
  "request_ip",
  "request_time",
  "user_id",
  "completion_ip",
  "completion_time"
from "password_resets"`

	var rows []PasswordReset

	dbRows, err := db.Query(sql)
	if err != nil {
		return nil, err
	}

	for dbRows.Next() {
		var row PasswordReset
		dbRows.Scan(
			&row.Token,
			&row.Email,
			&row.RequestIP,
			&row.RequestTime,
			&row.UserID,
			&row.CompletionIP,
			&row.CompletionTime,
		)
		rows = append(rows, row)
	}

	if dbRows.Err() != nil {
		return nil, dbRows.Err()
	}

	return rows, nil
}

func SelectPasswordResetByPK(
	db Queryer,
	token string,
) (*PasswordReset, error) {
	sql := `select
  "token",
  "email",
  "request_ip",
  "request_time",
  "user_id",
  "completion_ip",
  "completion_time"
from "password_resets"
where "token"=$1`

	var row PasswordReset
	err := db.QueryRow(sql, token).Scan(
		&row.Token,
		&row.Email,
		&row.RequestIP,
		&row.RequestTime,
		&row.UserID,
		&row.CompletionIP,
		&row.CompletionTime,
	)
	if err == pgx.ErrNoRows {
		return nil, ErrNotFound
	} else if err != nil {
		return nil, err
	}

	return &row, nil
}

func InsertPasswordReset(db Queryer, row *PasswordReset) error {
	args := pgx.QueryArgs(make([]interface{}, 0, 7))

	var columns, values []string

	row.Token.addInsert(`token`, &columns, &values, &args)
	row.Email.addInsert(`email`, &columns, &values, &args)
	row.RequestIP.addInsert(`request_ip`, &columns, &values, &args)
	row.RequestTime.addInsert(`request_time`, &columns, &values, &args)
	row.UserID.addInsert(`user_id`, &columns, &values, &args)
	row.CompletionIP.addInsert(`completion_ip`, &columns, &values, &args)
	row.CompletionTime.addInsert(`completion_time`, &columns, &values, &args)

	sql := `insert into "password_resets"(` + strings.Join(columns, ", ") + `)
values(` + strings.Join(values, ",") + `)
returning "token"
  `

	return db.QueryRow(sql, args...).Scan(&row.Token)
}

func UpdatePasswordReset(db Queryer,
	token string,
	row *PasswordReset,
) error {
	sets := make([]string, 0, 7)
	args := pgx.QueryArgs(make([]interface{}, 0, 7))

	row.Token.addUpdate(`token`, &sets, &args)
	row.Email.addUpdate(`email`, &sets, &args)
	row.RequestIP.addUpdate(`request_ip`, &sets, &args)
	row.RequestTime.addUpdate(`request_time`, &sets, &args)
	row.UserID.addUpdate(`user_id`, &sets, &args)
	row.CompletionIP.addUpdate(`completion_ip`, &sets, &args)
	row.CompletionTime.addUpdate(`completion_time`, &sets, &args)

	if len(sets) == 0 {
		return nil
	}

	sql := `update "password_resets" set ` + strings.Join(sets, ", ") + ` where ` + `"token"=` + args.Append(token)

	commandTag, err := db.Exec(sql, args...)
	if err != nil {
		return err
	}
	if commandTag.RowsAffected() != 1 {
		return ErrNotFound
	}
	return nil
}

func DeletePasswordReset(db Queryer,
	token string,
) error {
	args := pgx.QueryArgs(make([]interface{}, 0, 1))

	sql := `delete from "password_resets" where ` + `"token"=` + args.Append(token)

	commandTag, err := db.Exec(sql, args...)
	if err != nil {
		return err
	}
	if commandTag.RowsAffected() != 1 {
		return pgx.ErrNoRows
	}
	return nil
}
