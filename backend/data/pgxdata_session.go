package data

// This file is automatically generated by pgxdata.

import (
	"context"
	"strings"

	"errors"

	"github.com/jackc/pgsql"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

type Session struct {
	ID        []byte
	UserID    pgtype.Int4
	StartTime pgtype.Timestamptz
}

const countSessionSQL = `select count(*) from "sessions"`

func CountSession(ctx context.Context, db Queryer) (int64, error) {
	var n int64
	err := db.QueryRow(ctx, countSessionSQL).Scan(&n)
	return n, err
}

const SelectAllSessionSQL = `select
  "id",
  "user_id",
  "start_time"
from "sessions"`

func SelectAllSession(ctx context.Context, db Queryer) ([]Session, error) {
	var rows []Session

	dbRows, err := db.Query(ctx, SelectAllSessionSQL)
	if err != nil {
		return nil, err
	}

	for dbRows.Next() {
		var row Session
		dbRows.Scan(
			&row.ID,
			&row.UserID,
			&row.StartTime,
		)
		rows = append(rows, row)
	}

	if dbRows.Err() != nil {
		return nil, dbRows.Err()
	}

	return rows, nil
}

const selectSessionByPKSQL = `select
  "id",
  "user_id",
  "start_time"
from "sessions"
where "id"=$1`

func SelectSessionByPK(
	ctx context.Context,
	db Queryer,
	id []byte,
) (*Session, error) {
	var row Session
	err := db.QueryRow(ctx, selectSessionByPKSQL, id).Scan(
		&row.ID,
		&row.UserID,
		&row.StartTime,
	)
	if errors.Is(err, pgx.ErrNoRows) {
		return nil, ErrNotFound
	} else if err != nil {
		return nil, err
	}

	return &row, nil
}

func InsertSession(ctx context.Context, db Queryer, row *Session) error {
	args := pgsql.Args{}

	var columns, values []string

	columns = append(columns, `id`)
	values = append(values, args.Use(&row.ID).String())
	columns = append(columns, `user_id`)
	values = append(values, args.Use(&row.UserID).String())

	sql := `insert into "sessions"(` + strings.Join(columns, ", ") + `)
values(` + strings.Join(values, ",") + `)
returning "id"
  `

	return db.QueryRow(ctx, sql, args.Values()...).Scan(&row.ID)
}

func UpdateSession(ctx context.Context, db Queryer,
	id []byte,
	row *Session,
) error {
	sets := make([]string, 0, 3)
	args := pgsql.Args{}

	sets = append(sets, `id`+"="+args.Use(&row.ID).String())
	sets = append(sets, `user_id`+"="+args.Use(&row.UserID).String())
	sets = append(sets, `start_time`+"="+args.Use(&row.StartTime).String())

	if len(sets) == 0 {
		return nil
	}

	sql := `update "sessions" set ` + strings.Join(sets, ", ") + ` where ` + `"id"=` + args.Use(id).String()

	commandTag, err := db.Exec(ctx, sql, args.Values()...)
	if err != nil {
		return err
	}
	if commandTag.RowsAffected() != 1 {
		return ErrNotFound
	}
	return nil
}

func DeleteSession(ctx context.Context, db Queryer,
	id []byte,
) error {
	args := pgsql.Args{}

	sql := `delete from "sessions" where ` + `"id"=` + args.Use(id).String()

	commandTag, err := db.Exec(ctx, sql, args.Values()...)
	if err != nil {
		return err
	}
	if commandTag.RowsAffected() != 1 {
		return ErrNotFound
	}
	return nil
}
