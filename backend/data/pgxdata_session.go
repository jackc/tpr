package data
// This file is automatically generated by pgxdata.

import (
  "context"
  "strings"

  errors "golang.org/x/xerrors"
  "github.com/jackc/pgx/v4"
  "github.com/jackc/pgtype"
)

type Session struct {
  ID pgtype.Bytea
  UserID pgtype.Int4
  StartTime pgtype.Timestamptz
}

const countSessionSQL = `select count(*) from "sessions"`

func CountSession(ctx context.Context, db Queryer) (int64, error) {
  var n int64
  err := prepareQueryRow(ctx, db, "pgxdataCountSession", countSessionSQL).Scan(&n)
  return n, err
}

const SelectAllSessionSQL = `select
  "id",
  "user_id",
  "start_time"
from "sessions"`

func SelectAllSession(ctx context.Context, db Queryer) ([]Session, error) {
  var rows []Session

  dbRows, err := prepareQuery(ctx, db, "pgxdataSelectAllSession", SelectAllSessionSQL)
  if err != nil {
    return nil, err
  }

  for dbRows.Next() {
    var row Session
    dbRows.Scan(
&row.ID,
    &row.UserID,
    &row.StartTime,
    )
    rows = append(rows, row)
  }

  if dbRows.Err() != nil {
    return nil, dbRows.Err()
  }

  return rows, nil
}

const selectSessionByPKSQL = `select
  "id",
  "user_id",
  "start_time"
from "sessions"
where "id"=$1`

func SelectSessionByPK(
  ctx context.Context,
  db Queryer,
  id []byte,
) (*Session, error) {
  var row Session
  err := prepareQueryRow(ctx, db, "pgxdataSelectSessionByPK", selectSessionByPKSQL, id).Scan(
&row.ID,
    &row.UserID,
    &row.StartTime,
    )
  if errors.Is(err, pgx.ErrNoRows) {
    return nil, ErrNotFound
  } else if err != nil {
    return nil, err
  }

  return &row, nil
}

func InsertSession(ctx context.Context, db Queryer, row *Session) error {
  args := pgx.QueryArgs(make([]interface{}, 0, 3))

  var columns, values []string

  if row.ID.Status != pgtype.Undefined {
    columns = append(columns, `id`)
    values = append(values, args.Append(&row.ID))
  }
  if row.UserID.Status != pgtype.Undefined {
    columns = append(columns, `user_id`)
    values = append(values, args.Append(&row.UserID))
  }
  if row.StartTime.Status != pgtype.Undefined {
    columns = append(columns, `start_time`)
    values = append(values, args.Append(&row.StartTime))
  }


  sql := `insert into "sessions"(` + strings.Join(columns, ", ") + `)
values(` + strings.Join(values, ",") + `)
returning "id"
  `

  psName := preparedName("pgxdataInsertSession", sql)

  return prepareQueryRow(ctx, db, psName, sql, args...).Scan(&row.ID)
}

func UpdateSession(ctx context.Context, db Queryer,
  id []byte,
  row *Session,
) error {
  sets := make([]string, 0, 3)
  args := pgx.QueryArgs(make([]interface{}, 0, 3))

  if row.ID.Status != pgtype.Undefined {
    sets = append(sets, `id`+"="+args.Append(&row.ID))
  }
  if row.UserID.Status != pgtype.Undefined {
    sets = append(sets, `user_id`+"="+args.Append(&row.UserID))
  }
  if row.StartTime.Status != pgtype.Undefined {
    sets = append(sets, `start_time`+"="+args.Append(&row.StartTime))
  }


  if len(sets) == 0 {
    return nil
  }

  sql := `update "sessions" set ` + strings.Join(sets, ", ") + ` where `  + `"id"=` + args.Append(id)

  psName := preparedName("pgxdataUpdateSession", sql)

  commandTag, err := prepareExec(ctx, db, psName, sql, args...)
  if err != nil {
    return err
  }
  if commandTag.RowsAffected() != 1 {
    return ErrNotFound
  }
  return nil
}

func DeleteSession(ctx context.Context, db Queryer,
  id []byte,
) error {
  args := pgx.QueryArgs(make([]interface{}, 0, 1))

  sql := `delete from "sessions" where `  + `"id"=` + args.Append(id)

  commandTag, err := prepareExec(ctx, db, "pgxdataDeleteSession", sql, args...)
  if err != nil {
    return err
  }
  if commandTag.RowsAffected() != 1 {
    return ErrNotFound
  }
  return nil
}

