// Package box stores values that may be undefined, unknown, or empty.
package box

import (
	"strconv"
	"time"
)

const (
	Undefined = iota
	Unknown   = iota
	Empty     = iota
	Full      = iota
)

<%
[
	['Bool', 'bool'],
	['Float32', 'float32'],
	['Float64', 'float64'],
	['Int8', 'int8'],
	['Int16', 'int16'],
	['Int32', 'int32'],
	['Int64', 'int64'],
	['String', 'string'],
	['Time', 'time.Time'],
	['UInt8', 'uint8'],
	['UInt16', 'uint16'],
	['UInt32', 'uint32'],
	['UInt64', 'uint64']
].each do |box_type, value_type|
%>
type <%= box_type %> struct {
	value  <%= value_type %>
	status byte
}

// New<%= box_type %> returns a <%= box_type %> initialized to v
func New<%= box_type %>(v <%= value_type %>) (box <%= box_type %>) {
	box.Set(v)
	return box
}

// Set places v in box
func (box *<%= box_type %>) Set(v <%= value_type %>) {
	box.value = v
	box.status = Full
}

// GetCoerceNil returns the value if the box is full, otherwise it returns nil
func (box *<%= box_type %>) GetCoerceNil() interface{} {
	if box.status == Full {
		return box.value
	} else {
		return nil
	}
}

// SetCoerceNil places v in box if v is not nil, otherwise it sets box to nilStatus
func (box *<%= box_type %>) SetCoerceNil(v interface{}, nilStatus byte) {
	if v != nil {
		box.Set(v.(<%= value_type %>))
	} else {
	  box.status = nilStatus
	}
}

// GetCoerceZero returns value if the box is full, otherwise it returns the zero value
func (box *<%= box_type %>) GetCoerceZero() <%= value_type %> {
	if box.status == Full {
		return box.value
	} else {
		var zero <%= value_type %>
		return zero
	}
}

// SetCoerceZero places v in box if v is not the zero value, otherwise it sets box to zeroStatus
func (box *<%= box_type %>) SetCoerceZero(v <%= value_type %>, zeroStatus byte) {
	var zero <%= value_type %>

	if v != zero {
		box.Set(v)
	} else {
	  box.status = zeroStatus
	}
}

// SetUndefined sets box to Undefined
func (box *<%= box_type %>) SetUndefined() {
	box.status = Undefined
}

// SetUnknown sets box to Unknown
func (box *<%= box_type %>) SetUnknown() {
	box.status = Unknown
}

// SetEmpty sets box to Empty
func (box *<%= box_type %>) SetEmpty() {
	box.status = Empty
}

// MustGet returns the value or panics if box is not full
func (box *<%= box_type %>) MustGet() <%= value_type %> {
	if box.status != Full {
		panic("called MustGet on a box that was not full")
	}

	return box.value
}

// Get returns the value and present. present is true only if the box is Full and value is valid
func (box *<%= box_type %>) Get() (<%= value_type %>, bool) {
	if box.status != Full {
		var zeroVal <%= value_type %>
		return zeroVal, false
	}

	return box.value, true
}

// Status returns the box's status
func (box *<%= box_type %>) Status() byte {
	return box.status
}

<% end %>


func (box Bool) MarshalJSON() ([]byte, error) {
	if box.status != Full {
		return []byte("null"), nil
	}
	if box.value {
		return []byte("true"), nil
	}
	return []byte("false"), nil
}

<%
# MarshalJSON for floats
[
	["Float32", 32],
	["Float64", 64]
].each do |box_type, bitSize|
%>
func (box <%= box_type%>) MarshalJSON() ([]byte, error) {
	if box.status != Full {
		return []byte("null"), nil
	}
	return []byte(strconv.FormatFloat(float64(box.value), 'f', -1, <%= bitSize %>)), nil
}

<% end %>

<%
# MarshalJSON for integers
%w[
	Int8
	Int16
	Int32
	Int64
].each do |box_type|
%>
func (box <%= box_type%>) MarshalJSON() ([]byte, error) {
	if box.status != Full {
		return []byte("null"), nil
	}
	return []byte(strconv.FormatInt(int64(box.value), 10)), nil
}

<% end %>

func (box String) MarshalJSON() ([]byte, error) {
	if box.status != Full {
		return []byte("null"), nil
	}
	return []byte(`"` + box.value + `"`), nil
}

<%
# MarshalJSON for unsigned integers
%w[
	UInt8
	UInt16
	UInt32
	UInt64
].each do |box_type|
%>
func (box <%= box_type%>) MarshalJSON() ([]byte, error) {
	if box.status != Full {
		return []byte("null"), nil
	}
	return []byte(strconv.FormatUint(uint64(box.value), 10)), nil
}

<% end %>
